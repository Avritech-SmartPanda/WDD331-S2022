 //colors
 $body-background-color: darkred;
 $form-background-color: white;
 $input-color: white;
 $headlines-color : white;
 //set breakpoint sizes
 $break-small: 20em;
 $break-medium: 31em;
 $break-large: 60em;


 @mixin breakpoint($break) {
     @if $break ==large {
         @media (max-width: $break-large) {
             @content;
         }
     }

     @else if $break ==medium {
         @media (max-width: $break-medium) {
             @content;
         }
     }

     @else if $break ==small {
         @media (max-width: $break-small) {
             @content;
         }
     }

     @else {
         @media ($break) {
             @content;
         }
     }
 }

 $breakpoints: (
     'small': (min-width: 767px),
     'medium': (min-width: 992px),
     'large': (min-width: 1200px)) !default;


 /// Mixin to manage responsive breakpoints
 /// @author Kitty Giraudel
 /// @param {String} $breakpoint - Breakpoint name
 /// @require $breakpoints
 @mixin respond-to($breakpoint) {

     // If the key exists in the map
     @if map-has-key($breakpoints, $breakpoint) {

         // Prints a media query based on the value
         @media #{inspect(map-get($breakpoints, $breakpoint))} {
             @content;
         }
     }

     // If the key doesn't exist in the map
     @else {
         @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
         +"Available breakpoints are: #{map-keys($breakpoints)}.";
     }
 }

 body {
     background: white;

     @include breakpoint(large) {
         background: red;
     }

     @include breakpoint(medium) {
         background: cyan;
     }

     @include breakpoint(small) {
         background: green;
     }

     @include breakpoint("max-width: 480px") {
         background: yellow;
     }
 }

 #contactform {
     background-color: $form-background-color;

     input,
     textarea {
         background-color: $input-color;
         flex: 2;
     }

     @media (min-width: $break-small) {
         & {
             width: 90%;
             max-width: 700px;
             margin-left: auto;
             margin-right: auto;
         }
     }
 }

 @mixin flex-container($axis, $wrap: nowrap) {
     display: -webkit-box;
     display: -webkit-flex;
     display: -ms-flexbox;
     display: flex;
     -webkit-flex-flow: $axis $wrap;
     -ms-flex-flow: $axis $wrap;
     flex-flow: $axis $wrap;
 }

 fieldset>div {
     @include flex-container(column
 );
 }

 @mixin center {
     width: 90%;
     max-width: 960px;
     margin-left: auto;
     margin-right: auto;
 }

 #content {
     @include center;
 }

 .selector {
    color: red;
    
    @include respond-to('small') {
      color: blue;
    }
  }